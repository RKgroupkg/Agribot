#include<Servo.h>
#include <LiquidCrystal.h> //.................................
Servo servo1;

/********************************************************************************************************************************************************************/
// defines variables
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement
/********************************************************************************************************************************************************************/
int pos; //pos of servo 1
int mosture; //mosture level of soil
int limit_mosture =80; //limit at which pump will be activated
int pump_state  =  0; //0 means off 1 means on 
#define pump 4 //pump pin
#define sensorPin A0
/********************************************************************************************************************************************************************/

int sensor = 22;              // the pin that the sensor is atteched to
int state = LOW;             // by default, no motion detected
int val = 0;                 // variable to store the sensor status (value)
int active_state = 1; // defualt active 1 on 0 off 
//the time we give the sensor to calibrate (10-60 secs according to the datasheet)
int calibrationTime = 30;

/*************************************************************************************************************************************************************/
int IR1=26;      //Right sensor
int IR2=24;    //left Sensor
int enR = 29;    //Right motor
int enL = 28;    //Left motor
/******************************************************************************************************************************************\********************/
char Mode = 'M';

// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 52, en = 53, d4 = 50, d5 = 51, d6 = 48, d7 = 49;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);





char bluetooth_data; //data which is recived from bluetooth in char


// prototype definations
void init_bluetooth_module(int,int,int);
void recive_data();
void control_car();
void pinmode_setup();
int readSensor();
void check_soil();
int update_servo_angle(int,int,int); 
void sensor_controller();
void controll_pump();
void check_pir_sensor();
void pir_sensor_clalibrating();
void Auto_controll_car();
void check_auto_drive();
void Mode_loop();






void setup() {
  init_bluetooth_module(9600);
  pinmode_setup();
  //controll_pump();
  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
  // Print a message to the LCD.
  lcd.print("AgriBot");
  
  
  Serial.println("AgriBot running :: ");
  delay(10);
  lcd.clear();
}


void loop() {
  // put your main code here, to run repeatedly
   recive_data(); //RECIVE DATA FROM SERIAL_DATA
   Mode_loop();
   check_auto_drive(); //check for auto drive 

  }


//****************************************************** Function Implementation ***************************************************************************************** //

void init_bluetooth_module(int baudRate){
  Serial.begin(baudRate);  
  }
 //.......................................................................................................................................................// 
void recive_data(){
  if (Serial.available()) {
     bluetooth_data = Serial.read();
      Serial.print("Recived data :: ");
      Serial.println(bluetooth_data);
      lcd.setCursor(0,0);
      lcd.print("Rd:");
      lcd.setCursor(3,0);
      lcd.write(bluetooth_data);
    }
 }
 
 //.......................................................................................................................................................// 
void control_car(){
    analogWrite(enR, 150); //ENR pin set speed to 200 (max 255)
    analogWrite(enL, 150); //ENL pin
    if(bluetooth_data == 'F'){            //move forward(all motors rotate in forward direction)
      digitalWrite(13,HIGH);
      digitalWrite(11,HIGH);
    }
     
    else if(bluetooth_data == 'B'){      //move reverse (all motors rotate in reverse direction)
      digitalWrite(12,HIGH);
      digitalWrite(10,HIGH);
    }
     
    else if(bluetooth_data == 'L'){      //turn right (left side motors rotate in forward direction, right side motors doesn't rotate)
      digitalWrite(11,HIGH);
      digitalWrite(12,HIGH);
    }
     
    else if(bluetooth_data == 'R'){      //turn left (right side motors rotate in forward direction, left side motors doesn't rotate)
      digitalWrite(13,HIGH);
      digitalWrite(10,HIGH);
    }
    
    else if(bluetooth_data == 'W'){    //turn led on or off)
      digitalWrite(9,HIGH);
    }
    else if(bluetooth_data == 'w'){
      digitalWrite(9,LOW);
    }
     
    else if(bluetooth_data == 'S'){      //STOP (all motors stop)
      digitalWrite(13,LOW);
      digitalWrite(12,LOW);
      digitalWrite(11,LOW);
      digitalWrite(10,LOW);
    }
     else if(bluetooth_data == 'P'){      //controll pump
      pump_state = 1;
    }else if(bluetooth_data == 'p'){      //controll pump
      pump_state = 0;
      
    }
}
 //.......................................................................................................................................................// 
  void pinmode_setup(){
    pinMode(pump,OUTPUT);    //set pump as output 
    pinMode(sensor, INPUT);  // initialize pir sensor as an input  
    digitalWrite(9,HIGH);    //led pin for head light 
    pinMode(13,OUTPUT);      //left motors
    pinMode(12,OUTPUT);      //left motors 
    pinMode(11,OUTPUT);      //right motors
    pinMode(10,OUTPUT);      //right motors
    pinMode(enR, OUTPUT);    //enable pin Right
    pinMode(enL, OUTPUT);    //enable pin left
    servo1.attach(2);        //init pin for servo;
    servo1.write(0);         //set servo postion to 0 degree 
    
    }
 //.......................................................................................................................................................// 
    int readSensor() {
      int sensorValue = analogRead(sensorPin);  // Read the analog value from sensor
      int outputValue = map(sensorValue, 0, 1023, 255, 0); // map the 10-bit data to 8-bit data
     
      return outputValue;             // Return analog moisture value
    }
 //.......................................................................................................................................................//   
    void check_soil(){
      digitalWrite(13,LOW);
      digitalWrite(12,LOW);
      digitalWrite(11,LOW);
      digitalWrite(10,LOW);
  update_servo_angle(0,70,1); //set servo moter to 90 degree
  int sum =0;
  for (int r =0;r!=100;r++){
   sum = sum + readSensor();
   delay(10);
  }  
  int average = sum/100; //take out average 
   Serial.print("Mosture of soil : ");
  Serial.println(average);
  lcd.setCursor(0,1);
      lcd.print("Soil Mos:");
      lcd.setCursor(10,1);
      lcd.print(average);
 
    mosture = average; //set mosture to average value of mostior sensor
    update_servo_angle(70,0,1); //set servo moter to 0 degree
   
 
  }
  int  update_servo_angle(int current_angle,int updat_angle,int servo_no){
         if (servo_no == 1){
         servo1.write(updat_angle);
         }
                    }
 //.......................................................................................................................................................// 
     void sensor_controller(){
      if(bluetooth_data == 'T'){    
          check_soil();
          if (mosture <= limit_mosture & pump_state != 1){
          pump_state = 1;
          Serial.println("Pump activated");
          }
            }
      else if(bluetooth_data == 'M'){
        pir_sensor_clalibrating();
        active_state = 1;
        }else  if (bluetooth_data == 'm'){
          active_state = 0; 
          }
            
        if (active_state == 1){
        check_pir_sensor();
        }
             
             }
  //.......................................................................................................................................................// 
     void controll_pump(){
      if (pump_state == 1){
        digitalWrite(pump,LOW);
        }else{
          digitalWrite(pump,HIGH);
          }
      
      
      }
 //.......................................................................................................................................................// 
void check_pir_sensor(){
  val = digitalRead(sensor);   // read sensor value
  if (val == HIGH) {           // check if the sensor is HIGH
      //can activate buzzer
    
    if (state == LOW) {
      Serial.println("Motion detected!"); 
      state = HIGH;       // update variable state to HIGH
    }
  }
   
  else {
    //can deactivate buzze
      
      if (state == HIGH){
        Serial.println("Motion stopped!");
        state = LOW;       // update variable state to LOW
    }
  }
}
  
 //.......................................................................................................................................................// 
void pir_sensor_clalibrating(){
  
  //give the sensor some time to calibrate
  Serial.print("calibrating pir sensor ");
  for(int i = 0; i < calibrationTime; i++){
      Serial.print(".");
    delay(1000);
  }
  Serial.println(" done");
  Serial.println("SENSOR Calibrated");
  delay(50);
  }
//.............................................................................................................................................................//
void Auto_controll_car(){
  if(digitalRead(IR1)==HIGH && digitalRead(IR2)==HIGH) //IR will not glow on black line
  {
      digitalWrite(13,LOW);
      digitalWrite(12,LOW);
      digitalWrite(11,LOW);
      digitalWrite(10,LOW);
      analogWrite (enR, 0);
      analogWrite (enL, 0); 
    }
    else if(digitalRead(IR1)==LOW && digitalRead(IR2)==LOW)  //IR not on black line
    {
      digitalWrite(13,HIGH);
      digitalWrite(11,HIGH);
      digitalWrite(12,LOW);
      digitalWrite(10,LOW);
      analogWrite (enR, 200);
      analogWrite (enL, 200);
    
    }
    else if(digitalRead(IR1)==LOW && digitalRead(IR2)==HIGH) //move to left
    {
     digitalWrite(13,HIGH);
      digitalWrite(10,LOW);
     digitalWrite(11,LOW);
     digitalWrite(12,LOW); 
     analogWrite (enR, 200);
     analogWrite (enL, 150);
     delay(100);
      
    }
    else if(digitalRead(IR1)==HIGH && digitalRead(IR2)==LOW) //move right
    {
     digitalWrite(11,HIGH); 
     digitalWrite(10,LOW);
     digitalWrite(13,LOW);
     digitalWrite(12,LOW);
     analogWrite (enR, 150);
     analogWrite (enL, 200);
     delay(100);  
    }
    else {
      Serial.println("some thing bad :: error 506");
      digitalWrite(13,LOW);
      digitalWrite(12,LOW);
      digitalWrite(11,LOW);
      digitalWrite(10,LOW);
      analogWrite (enR, 0);
      analogWrite (enL, 0); 
      
      
      }
  }
  //.............................................................................................................................................................//
void check_auto_drive(){
  if (bluetooth_data == 'A'){
    Mode = 'A';
    Serial.println("Automatic mode started ::  ");
    
    }else if (bluetooth_data == 'a'){
      Mode = 'M';
    Serial.println("Automatic mode off ::::  ");
      }
  
  }
  //...............................................................................................................................................................//
 void Mode_loop(){
   if (Mode == 'M')// manual loop
   {
   
   control_car(); // controll the moter of car and leg and pump
   sensor_controller(); //controll sensor
   controll_pump ();  //controll pump
  }else if (Mode == 'A'){
    Auto_controll_car ();
    }
  }
